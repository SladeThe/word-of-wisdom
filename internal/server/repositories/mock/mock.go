// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/SladeThe/word-of-wisdom/internal/server/repositories (interfaces: Client,WordOfWisdom)
//
// Generated by this command:
//
//	mockgen -package mock -destination mock/mock.go . Client,WordOfWisdom
//

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	reflect "reflect"

	entities "github.com/SladeThe/word-of-wisdom/internal/common/entities"
	gomock "go.uber.org/mock/gomock"
)

// MockClient is a mock of Client interface.
type MockClient struct {
	ctrl     *gomock.Controller
	recorder *MockClientMockRecorder
}

// MockClientMockRecorder is the mock recorder for MockClient.
type MockClientMockRecorder struct {
	mock *MockClient
}

// NewMockClient creates a new mock instance.
func NewMockClient(ctrl *gomock.Controller) *MockClient {
	mock := &MockClient{ctrl: ctrl}
	mock.recorder = &MockClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockClient) EXPECT() *MockClientMockRecorder {
	return m.recorder
}

// OneByID mocks base method.
func (m *MockClient) OneByID(arg0 context.Context, arg1 entities.ClientID) (entities.Client, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneByID", arg0, arg1)
	ret0, _ := ret[0].(entities.Client)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneByID indicates an expected call of OneByID.
func (mr *MockClientMockRecorder) OneByID(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneByID", reflect.TypeOf((*MockClient)(nil).OneByID), arg0, arg1)
}

// MockWordOfWisdom is a mock of WordOfWisdom interface.
type MockWordOfWisdom struct {
	ctrl     *gomock.Controller
	recorder *MockWordOfWisdomMockRecorder
}

// MockWordOfWisdomMockRecorder is the mock recorder for MockWordOfWisdom.
type MockWordOfWisdomMockRecorder struct {
	mock *MockWordOfWisdom
}

// NewMockWordOfWisdom creates a new mock instance.
func NewMockWordOfWisdom(ctrl *gomock.Controller) *MockWordOfWisdom {
	mock := &MockWordOfWisdom{ctrl: ctrl}
	mock.recorder = &MockWordOfWisdomMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWordOfWisdom) EXPECT() *MockWordOfWisdomMockRecorder {
	return m.recorder
}

// OneRandom mocks base method.
func (m *MockWordOfWisdom) OneRandom() (entities.WordOfWisdom, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "OneRandom")
	ret0, _ := ret[0].(entities.WordOfWisdom)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OneRandom indicates an expected call of OneRandom.
func (mr *MockWordOfWisdomMockRecorder) OneRandom() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OneRandom", reflect.TypeOf((*MockWordOfWisdom)(nil).OneRandom))
}
